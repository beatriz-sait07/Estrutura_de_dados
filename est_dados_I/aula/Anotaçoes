                    25/07/2022

LIVROS
estrutura de dados com jogos(knouth)
introdução a estrutura de ddos com técnicas de programação em c(renato)
alg em estrutura de dados em c/c++ (MELHOR OPÇÃO)

CONTEUDO
melhor caso do bobble é quando o vetor já está ordenado


------------observação-----------
sempre que criar tem que destruir, assim como, quando alcoar tem que desalocar

cortar/dividir tads podeacaber perdendo referencias

mexer com compare, join, split precisa do tamanho

especificações sao os dados(funções)

calloc/ malloc - qual a melhor escolha ? (calloc zera as variaveiz enquanto malloc utiliza o lixo de memoria, porem o callo é menos perfomavel)

em dedstroy estou limpando o ponteiro e depois a estrutura inteira, pois se eu destruir apenas a estrutura ficara casas as quais não serão desalocadas

a função bool inicia-se com : bool isNOME

        01/08/2022 - aula 03

todos os TADS precisa de um contador para redução de custos, ou seja, aumento de eficiencia

        15/08/2022 - aula 04
em modulo é sempre melhor para estábilidade do vetor

algoritmo quadraticos sao simples, mas são melhores em alguma ocasioes e outras não.
saiba o porque!!

        16/08/2022 - aula 05
realizar o trabalho valendo nota, onde voce ira utilizar o "float_vector"


mergi -> dividir para conquistar, use recursividade
ele divide o vetor até ter uma unica casa nele, ex:
vetor inicial = [3 0 7 1 5 2 4 6] -> fase da divisao ainda dentro da recursao
1 subvetores = [3 0 7 1] [5 2 4 6]
2 subvetor = [3 0] [7 1] [5 2] [4 6]
vetor final = [3] [0] [7] [1] [5] [2] [4] [6]

vetor inicial = [0 3] [ 1 7] [2 5] [4 6] -> fase conquista, ainda dentro da recursao
subvetor = [0 1 3 7] [2 4 5 6]
vetor dinalizado = [0 1 2 3 4 5 6 7]


        22/08/2022 - aula 06

"equipe de 4 membros"
fazer uma apresentação do quick sorte - melhor equipe a apresentar e com o melhor alg. ganha pontos na prova!
- qual seria o melhor tipo de pivo ?
- pode usar qualquer linguagem de programação
- elementos menor que o pivo fica a esquerda e os maiores a direita
- qual melhor e pior caso do quick, como evitar cair no caso quadratico
- USAR TAD E CASOS REAIS

- faltei 07, correção da prova
- não teve 08
        05/09/2022 - aula 09
como criar uma lista encadeada com tamanho finito ? ex: tam = 15

criar uma função bool para verificar se ela esta vazia
*para inserir algo no final, voce precisa achar apenas o primeiro elemento e guiar ele até o fim.*

        17/10/2022 - aula 10
**considerar a add no meio da lista, possivel questão de prova**
revisão do da lista duplamente encadeada

        24/10/2022 - aula 11
**pilha**
precisa controlar o topo.
LIFO: lest in first out -> ultimo elemento será o primeiro a ser retirado
                        -> push e pop
- pilha estática: implementada com vetor, obrigatóriamente precisa definir tamanho.
variavel para armazenar o topo, uma para a capacidade e uma para o indice.
- pilha dinamica: indice de entrada e indice de saida são controlados por ponteiro e listas duplamente ligada.
-> pilha so pode inserir ou remover no topo, mas fora o topo voce só pode buscar e/ou editar.
**para lista que voce sabe o tamanho, usar a pilha estática. independente do tamanho ela é mais eficiente pois voce pode ir direto ao campo que busca.o contrário diz-se para quando voce não sabe o tamnho ai sim torna-se eficienet usar uma pilha dinamica**

"cobrar em prova" -> como organizar a pilha ?
possivel resp: usar um vetor auxiliar e ir enserindo em ordem.
se fosse dinamica: realinhar os ponteiros.

peek -> usado p/ consultar na pilhar

        31/10/2022
 FIFO: first in first on

**primeiro que entra é o primeiro a sair**
quando estára vazia ? quando o fim e o inicio apontar para a mesma posição.
toda inserção deve ser feita no final, ao inserir acrescente um elemento ao fim, ou seja, fim+1;

fila estática: implementadas por vetor.

        07/11/2022
nós internos são considerados filhos da arvore, enquanto os nós externos sao sa folhas(nós que não suportao outros nós)

- ligar os nós por ponteiros/objetos.
- se conseguir, desenvolva o projeto final em python tambem.
- TODAS as arvores tem que estar balanceada.
- quando encher uma arvore, crie outra arvore e ligue elas usando algum conseito (floresta).
- arvore binaria só pode ter dois filhos (arvore de busca).
        -os elementos da esquerda tem que ser menor que os da direita.



-----------resposta aula----------------
pre :: raiz -> sub_ar_esq -> sub_ar_dir
+ * + 3 6 - 4 1 5

in ordem :: sub_ar_esq -> raiz -> sub_ar_dir
3 + 6 * 4 - 1 + 5

pos :: sub_ar_esq -> sub_ar_dir -> raiz
3 6 + 4 1 - * 5 +
____________________________________________
pre:
    h i j o m q p a b c e f
in:
    o j m i q p h a b c e f
pos:
    o m j p q i e f c b a h
    

######################## OBSERVAÇÕES ############################
nome de funções não ideiais
-size
-at
-get

** aprenda a guardar o ultimo elemento **

***busca de pesquisa***
bobble sort
quiok 


##### trabalho de agosto #####
500, 1.000, 10.000, 500.000, 1.000.000
quantidade de comparaçoes
quaantidade de varredura
quantidade de trocas
tempo
explicar qual foi o melhor dos algoritimos
colocar as especificaçoes do pc
analise curta sobre os alg de ordenação usado, dizer qual seria o melhor alg a ser usado naquele vetor.
conclusao final 
sequencia: 
bubble, selection, insertion, merge, quick

##### trabalho de setembro #####
criar uma lista de size, para inserir dados no meio da mesma
- insert ordenada
- pesq numero na lista, se existe (printa a posição que o numero está), caso não exista (print que o numero não existe)
- remover algum elemento
- implementar na LL findlista

###### novembro ######
NÃO HAVERÁ PROVA!!
-- criar menu para:
    - inserir
    - deletar
    - consultar
    - a arvore é simetrica ?
- destruir arvore.
- buscar algo na arvore.
- dividir arcore apos 50 elementos, criar uma floresta.


================== video aulas ====================
remoção
1º corrigir o encadeamento
distribuuicao gausziana (nao sei esxcrever)


*MAKEFILE*

make -> executa a primeira diretiva
make nome_ex -> busca e executa a diretiva solicitada



---------entregar trabalhos-----------
usando tads/objetos

###### HORÁRIO DE PERMANENCIA #####
seg 13:00
quar 14h
